import os
from dotenv import load_dotenv
from langchain_community.vectorstores import FAISS
from langchain_community.embeddings import OpenAIEmbeddings
from langchain_openai import ChatOpenAI, OpenAIEmbeddings
import re



def limpar_resposta_ia(resposta: str) -> str:
    """
    Remove duplica√ß√µes de 'Resposta:' em qualquer ponto e padroniza a sa√≠da da IA.
    """
    if not resposta:
        return ""

    # Remove m√∫ltiplas ocorr√™ncias seguidas de 'Resposta:'
    resposta = resposta.replace("Resposta: Resposta:", "Resposta:")

    # Remove todas as repeti√ß√µes internas
    resposta = re.sub(r"(Resposta:\s*)+", "Resposta: ", resposta, flags=re.IGNORECASE)

    # Garante que comece com 'Resposta: '
    if not resposta.strip().lower().startswith("resposta:"):
        resposta = "Resposta: " + resposta.strip()
    else:
        resposta = "Resposta: " + resposta.strip()[9:].strip()

    # Remove quebras de linha duplicadas e espa√ßos
    linhas = resposta.splitlines()
    linhas_limpa = [linha.strip() for linha in linhas if linha.strip()]
    resposta_final = "\n".join(linhas_limpa)

    return resposta_final.strip()
# Carregar vari√°vel de ambiente
load_dotenv()
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")

# Caminhos
PASTA_VETOR = "vetor/faiss_index"

# Inicializa os embeddings e carrega o √≠ndice FAISS
embeddings = OpenAIEmbeddings()
db = FAISS.load_local(PASTA_VETOR, embeddings, allow_dangerous_deserialization=True)

# Mapas de normaliza√ß√£o
CONVENIOS = {
    "unimed": "unimed",
    "geap": "geap",
    "austa": "austa",
    "bradesco": "bradesco",
    "notredame": "notredame",
    "prevent": "prevent",
    # adicione varia√ß√µes se precisar (ex.: "unimed franca": "unimed")
}

MODS_MAP = {
    # can√¥nico -> lista de sin√¥nimos
    "rm": ["rm", "ressonancia", "resson√¢ncia", "resson√¢ncia magn√©tica", "ressonancia magnetica"],
    "tc": ["tc", "tomografia", "tomografia computadorizada"],
    "eeg": ["eeg", "eletroencefalograma"],
    "enmg": ["enmg"],
    "us": ["us", "usg", "ultrassom", "ultrassonografia"],
    "polissonografia": ["polissonografia", "sono"],
    "angiografia": ["angiografia", "angio"],
}
# Inverso para lookup r√°pido
MOD_LOOKUP = {alias: canon for canon, aliases in MODS_MAP.items() for alias in aliases}

# Inicializa o modelo de linguagem
llm = ChatOpenAI(
    model_name="gpt-4",  # ou "gpt-3.5-turbo"
    temperature=0,
    openai_api_key=OPENAI_API_KEY
)

# Loop para perguntar
# Loop para perguntar
while True:
    pergunta = input("\nüì© Sua pergunta (ou 'sair'): ").strip()
    if pergunta.lower() == "sair":
        break

    pergunta_lower = pergunta.lower()

    # Detecta conv√™nio (pega o primeiro que aparecer)
    conv_canon = None
    for conv in CONVENIOS.keys():
        if conv in pergunta_lower:
            conv_canon = CONVENIOS[conv]
            break

    # Detecta modalidade pelo lookup de sin√¥nimos
    mod_canon = None
    for alias, canon in MOD_LOOKUP.items():
        if alias in pergunta_lower:
            mod_canon = canon
            break

    k = 4 if any(p in pergunta_lower for p in [" e ", " com ", " e/ou ", "restri√ß√£o", "acima de", "abaixo de"]) else 2

    # Buscar contexto mais relevante (default)
        # Buscar contexto mais relevante (default)
    documentos = db.similarity_search(pergunta, k=k)

    # Se identificarmos conv√™nio e modalidade, priorize blocos de conv√™nio via filtro manual
    if conv_canon and mod_canon:
        # 1) tentativa forte com palavras-chave
        querys = [
            f"{conv_canon} {mod_canon} cobertura de conv√™nio",
            f"Conv√™nio {conv_canon} cobre {mod_canon}",
            f"{conv_canon} {mod_canon} autoriza√ß√£o plano de sa√∫de",
            f"{conv_canon} {mod_canon} cobre",
        ]

        candidatos = []
        for q in querys:
            candidatos.extend(db.similarity_search(q, k=10))

        # remove duplicados preservando ordem
        vistos = set()
        candidatos = [c for c in candidatos if id(c) not in vistos and not vistos.add(id(c))]

        def ok(doc, only_conv=None, only_mod=None):
            md = doc.metadata or {}
            if md.get("tipo") != "convenio":
                return False
            if only_conv and md.get("convenio") != only_conv:
                return False
            if only_mod and md.get("modalidade") != only_mod:
                return False
            return True

        # 2) filtro ideal (conv√™nio + modalidade)
        docs_cov = [d for d in candidatos if ok(d, conv_canon, mod_canon)]

        # 3) fallback por conv√™nio
        if not docs_cov:
            docs_cov = [d for d in candidatos if ok(d, only_conv=conv_canon)]

        # 4) fallback por modalidade
        if not docs_cov:
            docs_cov = [d for d in candidatos if ok(d, only_mod=mod_canon)]

        # 5) se ainda vazio, tenta uma busca gen√©rica grande e filtra
        if not docs_cov:
            grandes = db.similarity_search(f"{conv_canon} {mod_canon}", k=30)
            docs_cov = [d for d in grandes if ok(d)]

        # Prioriza conv√™nios no topo
        if docs_cov:
            documentos = docs_cov + [d for d in documentos if d not in docs_cov]


    contexto = "\n\n".join([doc.page_content for doc in documentos])
    print("\nüìÑ Contexto retornado para a IA:\n")
    print(contexto)
    
    prompt = f"""

Quando a pergunta for sobre se um conv√™nio atende ou n√£o um exame/modalidade:
- Responda sempre de forma direta e clara com "Sim, o conv√™nio X cobre Y" ou "N√£o, o conv√™nio X n√£o cobre Y".
- Se houver condi√ß√µes (ex.: s√≥ cobre alguns casos, s√≥ cobre exames sem contraste), mencione ap√≥s a resposta direta.

Voc√™ √© um assistente de agendamentos treinado para responder perguntas de funcion√°rios de uma cl√≠nica m√©dica com base em documentos internos relacionados a exames (como RM, TC, etc).

Responda sempre com base apenas no conte√∫do fornecido no contexto.

Caso a pergunta mencione ou sugira que o paciente seja uma crian√ßa, beb√™, adolescente, ou utilize termos como 'filho', 'crian√ßa', 'pequeno', 'menor', 'beb√™', 'filha', 'menina', 'agitado', 'nervoso', 'n√£o para quieto', 'n√£o colabora' etc., busque no contexto qualquer bloco com orienta√ß√µes espec√≠ficas para pediatria.

Se houver um trecho sobre pacientes infantis ou crian√ßas agitadas, utilize-o na resposta com prioridade. Caso contr√°rio, informe que o documento n√£o possui essa informa√ß√£o espec√≠fica.

Se a pergunta mencionar um conv√™nio (como Unimed, GEAP, Austa, etc.) e uma modalidade (como RM, TC, EEG...), busque especificamente por blocos de **cobertura de conv√™nio**.

Caso encontre, utilize a informa√ß√£o presente nesse bloco.

Se a pergunta mencionar um conv√™nio (Unimed, GEAP, Austa, etc.), mesmo sem citar explicitamente a modalidade (ex: s√≥ dizer ‚Äúresson√¢ncia‚Äù ou ‚Äúexame‚Äù), e o contexto retornar blocos de cobertura, utilize esses blocos.

Nunca responda "n√£o encontrado" se houver qualquer bloco sobre o conv√™nio e modalidade combinados. Sempre prefira o conte√∫do mais pr√≥ximo, mesmo que esteja em linguagem diferente da pergunta.

Regras importantes:
- Seja direto e objetivo.
- Responda apenas o que foi perguntado.
- Nunca misture informa√ß√µes de preparo, c√≥digo ou indica√ß√µes se n√£o forem solicitadas.
- Se houver recomenda√ß√£o para que o paciente procure orienta√ß√£o m√©dica, informe isso claramente na resposta.
- Nunca diga que o documento n√£o fornece informa√ß√£o se houver qualquer recomenda√ß√£o ou orienta√ß√£o indireta no texto.
- Se a informa√ß√£o n√£o estiver clara no documento, responda educadamente que n√£o est√° dispon√≠vel.
- Se houver uma orienta√ß√£o no documento sobre a idade m√≠nima para realizar um exame (ex: ‚Äúa partir de 5 anos‚Äù), use essa informa√ß√£o com prioridade.
- Caso a idade do paciente seja inferior ao indicado, oriente o funcion√°rio a n√£o agendar e encaminhar para avalia√ß√£o m√©dica.

Regras complementares para infer√™ncias controladas:

- Se perguntado explicitamente sobre **preparo** (como jejum) e o documento n√£o tiver essa informa√ß√£o clara, busque exames semelhantes no contexto fornecido:
  - Caso encontre exames semelhantes (mesma modalidade, mesmo tipo de contraste) que exijam jejum, responda dessa forma:  
    "O documento n√£o especifica claramente o preparo para este exame, por√©m, exames semelhantes geralmente exigem jejum de 2 horas (sem contraste) ou 4 horas (com contraste). Recomendo confirmar com o setor respons√°vel."
  - Se n√£o encontrar exemplos semelhantes, informe claramente que "o documento n√£o especifica essa informa√ß√£o".

- Quando perguntado sobre **contraindica√ß√µes** ou **restri√ß√µes** espec√≠ficas e isso n√£o estiver claro, responda da seguinte forma:
  - "O documento n√£o menciona restri√ß√µes espec√≠ficas para este exame. No entanto, se o paciente possui hist√≥rico cl√≠nico relevante ou d√∫vidas sobre o procedimento, √© recomend√°vel confirmar diretamente com a equipe m√©dica antes do agendamento."

- Quando questionado sobre situa√ß√µes especiais (gestantes, pacientes renais, al√©rgicos a contraste), caso o documento n√£o mencione explicitamente, responda:
  - "O documento n√£o fornece informa√ß√µes espec√≠ficas sobre esta situa√ß√£o. Recomendo verificar com o m√©dico solicitante ou com o setor de agendamento."

Nunca responda com certezas absolutas em situa√ß√µes n√£o descritas claramente no documento.

Exemplo:
Pergunta: Qual o preparo para a RM do enc√©falo?
Resposta: Jejum de 2 horas. O exame √© realizado em 1,5T, 3,0T ou campo aberto com restri√ß√µes. Verificar se o paciente obeso (>100kg) cabe na bobina. Agendar em hor√°rio branco ou neuro.

Interprete o campo `medicos_envolvidos` da seguinte forma:

1. Quando presente, representa a lista de m√©dicos obrigat√≥rios para realiza√ß√£o do exame.
2. Quando ausente, o exame pode ser agendado com qualquer m√©dico, exceto se o texto do exame mencionar explicitamente algum nome.
3. Nunca crie nomes de m√©dicos por dedu√ß√£o. S√≥ mencione nomes reais se estiverem:
   - No campo `medicos_envolvidos`, ou
   - Especificados no texto do preparo, observa√ß√µes ou instru√ß√µes do exame.

Se a pergunta for sobre ‚Äúquem pode realizar o exame‚Äù, e n√£o houver informa√ß√£o, retorne que o dado n√£o est√° dispon√≠vel.

Lembre-se: muitos usu√°rios podem fazer perguntas com linguagem informal, como "meu filho √© agitado", "posso dar calmante?", "precisa de sedativo?", etc. Sempre que houver d√∫vidas relacionadas a crian√ßas agitadas ou medica√ß√£o, a resposta correta √©: a cl√≠nica **n√£o orienta o uso de medicamentos sem avalia√ß√£o m√©dica**. Apenas o m√©dico pode prescrever calmantes ou sedativos. Utilize os documentos dispon√≠veis para oferecer uma orienta√ß√£o clara e respons√°vel ao usu√°rio.

Considere varia√ß√µes sem√¢nticas nos termos infantis, como: 'pequeno', 'idade', 'pode fazer com 4 anos?', 's√≥ a partir de X anos', 'crian√ßa menor', 'abaixo de X anos', etc. Sempre que poss√≠vel, busque o trecho mais relacionado √† idade m√≠nima permitida nos documentos.

D√™ prefer√™ncia a qualquer bloco que utilize termos semelhantes ou equivalentes ao da pergunta, mesmo que a linguagem n√£o seja id√™ntica.

Voc√™ pode usar o contexto abaixo para responder:


{contexto}

üîé Pergunta: {pergunta}
""".replace("{contexto}", contexto).replace("{pergunta}", pergunta)

    resposta = llm.predict(prompt)
    resposta = limpar_resposta_ia(resposta)
    print(f"\nü§ñ\n{resposta}")

